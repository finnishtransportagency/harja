# Security hardening for GitHub Actions
# https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-third-party-actions

name: '[Scheduled] Harja: Deploy to production'
run-name: '[Scheduled] Harja: Deploy latest successful build to production'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  # Anna edellisen deploymentin mennä rauhassa loppuun, koska mahdollisesti käynnissä olevaa AWS migration lambdaa ei pysty canceloimaan
  # Jos edellinen deployment on ehtinyt migraatioiden ajon vaiheeseen, canceloiminen voi aiheuttaa ongelmia.
  cancel-in-progress: false

on:
  # Manuaalisen käynnistyksen asetukset
  workflow_dispatch:
  # Ajastettu käynnistys (Ajetaan deployment joka arkipäivä klo 7 (Huom, GitHub actions on UTC-aikavyöhykkeessä))
  #schedule:
  #  - cron: '0 4 * * 1-5'

# TODO:
#  - Muokkaa reusable_deploy-harja-image-to-ecs.yml tiedostoa niin, että se ottaa parametrina viimeisimmän onnistuneen buildin tiedot
#    - Muokkaa jobia niin, että se hakee viimeisimmän build artifactin run_id:n perusteella
#    - Muokkaa jobia niin, että se ajaa migraatiot jobille annetun commit SHA:n perusteella
#    - Lisää reusable_deploy-harja-image-to-ecs.yml omaksi jobin ajoksi tähän workflowhun

jobs:
  get-latest-successful-build:
    runs-on: ubuntu-latest
    env:
      ## Scriptin käyttämät ympäristömuuttujat ##
      WORKFLOW_FILENAME: 'harja_build_and_deploy.yml'
      BRANCH_NAME: 'develop'
      # Tarkastaa, että viimeisimmästä buildista löytyy build artifact
      CHECK_ARTIFACT_WITH_NAME: 'harja-uberjar'
    outputs:
      commit-sha: ${{ steps.latest-successful-build.outputs.commit-sha }}
      run-id: ${{ steps.latest-successful-build.outputs.run-id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest successful build
        uses: actions/github-script@v7
        id: latest-successful-build
        # Palauta result jobin outputtiin
        with:
          retries: 3
          result-encoding: json
          script: |
            const script = require('./.github/scripts/get-latest-successful-run.js')
            const result = await script({github, context, core})
            
            core.setOutput("commit-sha", result.commitSha);
            core.setOutput("run-id", result.runId);

      - name: Check results
        run: |
          echo "Latest successful commit SHA: ${{ steps.latest-successful-build.outputs.commit-sha }}"
          echo "Latest successful run ID: ${{ steps.latest-successful-build.outputs.run-id }}"

  deploy-to-production:
    uses: ./.github/workflows/reusable_deploy-harja-image-to-ecs.yml
    needs: [ get-latest-successful-build ]
    # Huom. parametrit ja salaisudet on määritelty GitHub environmenteissa
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # OIDC tokenia tarvitaan AWS jobeissa roolin omaksumiseen
      id-token: write
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read
    with:
      # TODO: Käytä prod-ympäristöä testien jälkeen
      environment: 'dev'
      commit-sha: ${{ needs.get-latest-successful-build.outputs.commit-sha }}
      artifact-run-id: ${{ needs.get-latest-succesful-build.outputs.run-id }}
    # Huom. Tietoturvasyistä johtuen, salaisuuksia ei voi hakea automaattisesti envinronmentista reusable workfloweissa
    #       Tässä määritetään mitkä yksittäiset salaisuudet reusable workflow saa lukea GitHub environmentista.
    #       Vaihtoehtoisesti, voi käyttää secrets: inherit toimintoa, jolloin reusable workflow saa kaikki salaisuudet
    #       kuin kutsuva workflowikin.
    secrets:
      aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

            


