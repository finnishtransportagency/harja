###
# Ajaa Harja-sovelluksen testipatterin, sekä yrittää tehdä buildin (e2e-testejä varten)
###

# Security hardening for GitHub Actions
# https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-third-party-actions

name: '[Reusable] Run app tests'

on:
  workflow_call:
    inputs:
      test-db-service:
        # Katso saatavilla olevat harjadb servicet docker-compose.yml:stä (esim. harjadb-latest)
        description: 'Testeissä käytettävän testitietokannan docker compose servicen nimi'
        type: string
        required: true
      e2e-browsers:
        description: 'E2E-testeissä testattavat selaimet (JSON)'
        default: "['chrome']"
        type: string
        required: false
      artifact-prefix:
        description: 'Optional prefix tämän jobin uploadaamien/downloadaamien artifactien nimeen. Tarpeellinen, jos tätä jobia kutsutaan esim. matrix-strategialla.'
        default: ''
        type: string
        required: false
      build-harja:
        description: 'Buildataanko harja kevyesti ("light") vai täysi build ("full") tai ei ollenkaan "false"'
        default: 'full'
        type: string
        required: false
      lint-clj:
        description: 'Enabloi lint-clj job'
        default: 'true'
        type: string
        required: false
      backend-tests:
        description: 'Enabloi back-tests job'
        default: 'true'
        type: string
        required: false
      basic-tests:
        description: 'Enabloi basic-tests job'
        default: 'true'
        type: string
        required: false
      integration-tests:
        description: 'Enabloi integration-tests job'
        default: 'true'
        type: string
        required: false
      e2e-tests:
        description: 'Enabloi e2e-tests job'
        default: 'true'
        type: string
        required: false


env:
  GH_DOCKER_REGISTRY: ghcr.io

jobs:
  # Linter job
  lint-clj:
    if: ${{ inputs.lint-clj == 'true' }}
    name: "Lint Clojure"
    runs-on: ubuntu-latest
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup clojure environment
        uses: ./.github/actions/setup-build-env-and-tools

      - name: Setup test tools
        uses: ./.github/actions/setup-test-tools
        with:
          clj-kondo: 2023.07.13

      # https://github.com/clj-kondo/clj-kondo/blob/master/doc/ci-integration.md
      - name: Lint
        continue-on-error: true
        run: clj-kondo --lint src --config '{:output {:pattern "::{{level}} file={{filename}},line={{row}},col={{col}}::{{message}}"}}'

  # Build job
  build-harja:
    if: ${{ inputs.build-harja != 'false' }}
    name: "Prod build"
    runs-on: ubuntu-latest
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read
      # Packages read lupaa tarvitaan Harjan testaukseen tarkoitettujen Docker imageiden pullaamiseen
      packages: read
      # Actions write oikeudella voidaan esim. listata ja poistaa artifacteja
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Käynnistetään testitietokanta docker-kontti, jota tarvitaan testien ajamiseen ja Harjan buildaamiseen
      - name: Start test database
        uses: ./.github/actions/start-test-db
        env:
          TEST_DB_SERVICE: ${{ inputs.test-db-service }}
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          service-name: ${{ env.TEST_DB_SERVICE }}

       # Huom: Build-action tarvitsee testitietokannan taustalle ennen buildin ajoa

      # Kevyestä buildistä on jätetty laadunseurannan ja dokumentaation build pois
      - name: Build Harja Uberjar (Kevyt)
        if: ${{ inputs.build-harja == 'light' }}
        uses: ./.github/actions/build-harja-app
        with:
          build-laadunseuranta: 'false'

      - name: Build Harja Uberjar (Täysi build)
        if: ${{ inputs.build-harja == 'full' }}
        uses: ./.github/actions/build-harja-app

      - name: Name build artifact using the branch name
        id: artifact-name
        env:
          REF: ${{ github.ref }}
          NAME_PREFIX: ${{ inputs.artifact-prefix }}
          # Branchin nimen "/"-merkit muunnetaan "-"-merkeiksi, ja muodostetaan branchiin pohjautuva nimi
        run: echo "value=${NAME_PREFIX}${REF////-}-uberjar" >> $GITHUB_OUTPUT

      - name: Delete old branch build artifacts (only the latest is needed)
        uses: actions/github-script@v7
        id: artifact
        with:
          script: |
            const res = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })

            res.data.artifacts
              .filter(({ name }) => name === '${{ steps.artifact-name.outputs.value }}')
              .forEach(({ id }) => {
                github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: id,
                })
              })

      - name: Upload a new build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-name.outputs.value }}
          path: ./target/harja-0.0.1-SNAPSHOT-standalone.jar
          if-no-files-found: error
          retention-days: 1

  backend-tests:
    if: ${{ inputs.backend-tests == 'true' }}
    name: "Backend-testit"
    runs-on: ubuntu-latest
    env:
      TZ: "EET"
    permissions:
      contents: read
      packages: read
      # Tarvitaan test-reportin julkaisuun PR:ssä
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Käynnistetään testitietokanta docker-kontti, jota tarvitaan testien ajamiseen
      - name: Start test database
        uses: ./.github/actions/start-test-db
        env:
          TEST_DB_SERVICE: ${{ inputs.test-db-service }}
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          service-name: ${{ env.TEST_DB_SERVICE }}

      - name: Setup clojure environment
        uses: ./.github/actions/setup-build-env-and-tools

      - name: Run backend tests
        run: lein test2junit

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@b1b7f659602565970688b2e2588738b9398e895d
        env:
          NAME_PREFIX: ${{ inputs.artifact-prefix }}
        if: always()
        with:
          report_paths: 'test2junit/xml/*.xml'
          require_passed_tests: true
          check_name: 'Test Report: ${{ env.NAME_PREFIX }}Backend'
          # https://github.com/mikepenz/action-junit-report/issues/40#issuecomment-1607743568
          # Kiertotie sille, että test result checkit menevät väärän workflown tuloksiin
          # develop-branchin mergen tai muun samantyyppisesti triggeröityjen workflowien kohdalla
          detailed_summary: true

  basic-tests:
    if: ${{ inputs.basic-tests == 'true' }}
    name: "Frontti- ja hitaat testit"
    runs-on: ubuntu-latest
    env:
      TZ: "EET"
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read
      # Packages read lupaa tarvitaan Harjan testaukseen tarkoitettujen Docker imageiden pullaamiseen
      packages: read
      # Tarvitaan test-reportin julkaisuun PR:ssä
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Käynnistetään testitietokanta docker-kontti, jota tarvitaan testien ajamiseen
      - name: Start test database
        uses: ./.github/actions/start-test-db
        env:
          TEST_DB_SERVICE: ${{ inputs.test-db-service }}
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          service-name: ${{ env.TEST_DB_SERVICE }}

      - name: Setup clojure environment
        uses: ./.github/actions/setup-build-env-and-tools

      - name: run slow tests
        run: lein test2junit :hidas

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@b1b7f659602565970688b2e2588738b9398e895d
        env:
          NAME_PREFIX: ${{ inputs.artifact-prefix }}
        if: always()
        with:
          report_paths: 'test2junit/xml/*.xml'
          require_passed_tests: true
          check_name: 'Test Report: ${{ env.NAME_PREFIX }}Slow'
          # https://github.com/mikepenz/action-junit-report/issues/40#issuecomment-1607743568
          # Kiertotie sille, että test result checkit menevät väärän workflown tuloksiin
          # develop-branchin mergen tai muun samantyyppisesti triggeröityjen workflowien kohdalla
          detailed_summary: true

      - name: Setup test tools
        uses: ./.github/actions/setup-test-tools
        with:
          phantom-js: 2.1.1

      - name: Front end tests
        run: |
          lein with-profile +test doo phantom test once

  # integraatiotestit vaativat ActiveMQ-brokerin, siksi oma jobi
  integration-tests:
    if: ${{ inputs.integration-tests == 'true' }}
    name: "integraatiotestit"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      TZ: "EET"
      HARJA_ITMF_BROKER_PORT: 61616
      HARJA_ITMF_BROKER_AI_PORT: 8161

    permissions:
      contents: read
      packages: read
      # Tarvitaan test-reportin julkaisuun PR:ssä
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Käynnistetään testitietokanta docker-kontti, jota tarvitaan testien ajamiseen
      - name: Start test database
        uses: ./.github/actions/start-test-db
        env:
          TEST_DB_SERVICE: ${{ inputs.test-db-service }}
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          service-name: ${{ env.TEST_DB_SERVICE }}

      # Käynnistetään ActiveMQ JMS-testejä varten
      - name: Start ActiveMQ
        uses: ./.github/actions/start-activemq
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup clojure environment
        uses: ./.github/actions/setup-build-env-and-tools

      - name: Run integration tests
        run: lein test2junit :integraatio

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@b1b7f659602565970688b2e2588738b9398e895d
        env:
          NAME_PREFIX: ${{ inputs.artifact-prefix }}
        if: always()
        with:
          report_paths: 'test2junit/xml/*.xml'
          require_passed_tests: true
          check_name: 'Test Report: ${{ env.NAME_PREFIX }}Integration'
          # https://github.com/mikepenz/action-junit-report/issues/40#issuecomment-1607743568
          # Kiertotie sille, että test result checkit menevät väärän workflown tuloksiin
          # develop-branchin mergen tai muun samantyyppisesti triggeröityjen workflowien kohdalla
          detailed_summary: true

  e2e-tests:
    if: ${{ inputs.e2e-tests == 'true' }}
    name: "e2e-testit (Cypress)"
    needs: build-harja
    runs-on: ubuntu-latest
    env:
      # Asetetaan Suomen aikavyöhyke testejä varten
      TZ: "EET"
    strategy:
      matrix:
        browser: ${{ fromJSON(inputs.e2e-browsers) }}

    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read
      # Packages read lupaa tarvitaan Harjan testaukseen tarkoitettujen Docker imageiden pullaamiseen
      packages: read
      # Tarvitaan test-reportin julkaisuun PR:ssä
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Käynnistetään testitietokanta docker-kontti, jota tarvitaan testien ajamiseen ja Harjan buildaamiseen
      - name: Start test database
        uses: ./.github/actions/start-test-db
        env:
          TEST_DB_SERVICE: ${{ inputs.test-db-service }}
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          service-name: ${{ env.TEST_DB_SERVICE }}

      # Asenna pelkkä Java
      - name: Setup environment
        uses: ./.github/actions/setup-build-env-and-tools
        with:
          install-java: true
          install-clojure-deps: false
          install-node-deps: false


      - name: Get the build artifact name
        id: artifact-name
        env:
          REF: ${{ github.ref }}
          NAME_PREFIX: ${{ inputs.artifact-prefix }}
          # Branchin nimen "/"-merkit muunnetaan "-"-merkeiksi, ja muodostetaan branchiin pohjautuva nimi
        run: echo "value=${NAME_PREFIX}${REF////-}-uberjar" >> $GITHUB_OUTPUT

      - name: Download uberjar artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.artifact-name.outputs.value }}
          path: ./

      - name: Start Harja jar
        env:
          HARJA_TIETOKANTA_HOST: localhost
          HARJA_TIETOKANTA_PORTTI: 5432
          HARJA_SALLI_OLETUSKAYTTAJA: "true"
          HARJA_DEV_YMPARISTO: "false"
          HARJA_ASETUKSET_OVERRIDE_TIEDOSTO: ".github/workflows/config/e2e-testit_asetukset.edn"
        run: |
          echo "Salli harjan oletuskäyttäjä? ${HARJA_SALLI_OLETUSKAYTTAJA}"
          echo "Harja dev ympäristö? ${HARJA_DEV_YMPARISTO}"
          echo "Aikavyöhyke: ${TZ}"
          echo "HARJA_TIETOKANTA_HOST: ${HARJA_TIETOKANTA_HOST}"
          echo "HARJA_TIETOKANTA_PORTTI: ${HARJA_TIETOKANTA_PORTTI}"

          echo "Luodaan Harjalle 'salaisuudet' .harja-kansioon"
          mkdir -p ../.harja
          echo aaaa > ../.harja/anti-csrf-token
          touch ../.harja/{mml,google-static-maps-key,turi-salasana,ava-salasana,yha-salasana,yha-api-key,labyrintti-salasana,velho-salasana,velho-varuste-salasana,api-sahkoposti-salasana,digiroad-api-key}
          touch ../.harja/harjalle_ajorata_kaista_puoli_20230519.csv
          
          echo "Käynnistetään Harja..."
          java -cp :harja-0.0.1-SNAPSHOT-standalone.jar harja.palvelin.main > harja.out 2>&1 &
          javapid=$!
          
          for i in $(seq 4); do
            curl localhost:3000 > /dev/null 2>&1 && break
            if kill -0 $javapid; then
              echo "Harja ei ole vielä käynnissä, odotetaan 10 sec..."
              sleep 10
            else
              echo "Harja ei käynnisty. Lopetetaan..."
              cat harja.out
              exit 1
            fi
          done

          echo "Harja käynnistyi. Alla ote Harja-sovelluksen lokista:"
          echo +++++++++++++++++++
          tail -50 harja.out
          echo +++++++++++++++++++
          echo

      - uses: actions/cache@v3
        id: cache-npm
        with:
          path: node_modules
          key: ${{ runner.os }}-cypress-pr-${{ hashFiles('package-lock.json') }}

      # Asennetaan projektin package.jsonissa määritelty transit-js versio
      # Package-lock tiedostosta ei voi asennaa yksittäisiä paketteja "npm ci" komennolla, joten
      # asennetaan kompromissina npm installilla spesifi versio, mikäli package-lock.json muuttuu.
      - name: Install Cypress test dependencies (transit-js)
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: |
          NPM_TRANSITJS_VERSION=$(node -pe 'require("./package").dependencies["transit-js"]')
          npm install "transit-js@${NPM_TRANSITJS_VERSION}" --ignore-scripts

      # Ajaa cypress testit erillisessä kontissa
      # Konttiin mountataan GITHUB_WORKSPACE, joka sisältää myös aiemmin asennetut node-moduulit, joita testit tarvitsevat
      - name: Run cypress for ${{ matrix.browser }}
        uses: ./.github/actions/start-cypress
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_WORKSPACE: ${{ env.GITHUB_WORKSPACE }}
          browser: ${{ matrix.browser }}

      - name: Publish Test Report for ${{ matrix.browser }}
        uses: mikepenz/action-junit-report@b1b7f659602565970688b2e2588738b9398e895d
        env:
          NAME_PREFIX: ${{ inputs.artifact-prefix }}
        if: always()
        with:
          report_paths: 'cypress/test-results/*.xml'
          require_passed_tests: true
          check_name: 'Test Report: Cypress (${{ env.NAME_PREFIX }}${{ matrix.browser }})'
          # https://github.com/mikepenz/action-junit-report/issues/40#issuecomment-1607743568
          # Kiertotie sille, että test result checkit menevät väärän workflown tuloksiin
          # develop-branchin mergen tai muun samantyyppisesti triggeröityjen workflowien kohdalla
          detailed_summary: true

      # Mikäli testit epäonnistuvat, tallenna cypress screenshotit ja videot artifakteina
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.browser }}
          path: cypress/screenshots
          retention-days: 4

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-videos-${{ matrix.browser }}
          path: cypress/videos
          retention-days: 2
