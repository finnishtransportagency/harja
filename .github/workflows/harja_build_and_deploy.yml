# Security hardening for GitHub Actions
# https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-third-party-actions

name: 'Harja: Build and deploy to ECS'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  # Anna edellisen deploymentin mennä rauhassa loppuun, koska mahdollisesti käynnissä olevaa AWS migration lambdaa ei pysty canceloimaan
  # Jos edellinen deployment on ehtinyt migraatioiden ajon vaiheeseen, canceloiminen voi aiheuttaa ongelmia.
  cancel-in-progress: false

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Valitse deploy-ympäristö'
        type: environment
        required: true
  push:
    branches:
      - develop

env:
  GH_DOCKER_REGISTRY: ghcr.io

# Testit ja build ajetaan rinnakkain, jotta ne suorituisivat mahdollisimman nopeasti
jobs:
  tests:
    # TODO: Palauta testit takaisin, kun muut ominaisuudet ovat valmiita tämän branchin suhteen
    if: false
    uses: ./.github/workflows/reusable_run_app_tests.yml
    # Permissions
    # https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    # https://docs.github.com/en/actions/using-workflows/reusing-workflows#access-and-permissions
    permissions:
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read
      # Packages read lupaa tarvitaan Harjan testaukseen tarkoitettujen Docker imageiden pullaamiseen
      packages: read
      # Actions write oikeudella voidaan esim. listata ja poistaa artifacteja
      actions: write
      # Tarvitaan test-reportin julkaisuun PR:ssä
      checks: write
    strategy:
      # Halutaan, että kaikki testit käydään läpi.
      # Yksittäinen flaky testi ei saa kaataa koko testimatriisia.
      fail-fast: false
      max-parallel: 2
      matrix:
        # Katso saatavilla olevat harjadb servicet docker-compose.yml:stä
        configs: [
          { testDBService: "harjadb-latest", e2eBrowsers: [ 'chrome' ], artifactPrefix: 'harjadb-latest_' }
        ]

    with:
      test-db-service: ${{ matrix.configs.testDBService }}
      e2e-browsers: ${{ toJSON(matrix.configs.e2eBrowsers) }}
      # Artifactien nimet täytyy prefixata, jotta jokainen matrix-job tuottaa uniikit build artifactit
      # ja nimeltään toisistaan erottuvat Test Reportit
      artifact-prefix: ${{ matrix.configs.artifactPrefix }}
      # Ei tehdä turhaan lint-testausta develop-branchille. Löydökset käsitellään PR:ien yhteydessä.
      lint-clj: 'false'
      build-harja: 'light'

  # Tarkistaa testijobin yleisen statuksen ja lähettää notifikaation, mikäli jotain meni pieleen
  check-tests-status-and-notify:
    needs: tests
    # TODO: Palauta normaali toiminta, kun muut ominaisuudet ovat valmiita tämän branchin suhteen
    if: false
    #if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send deploy failure message to Slack
        id: slack
        uses: slackapi/slack-github-action@70cd7be8e40a46e8b0eced40b0de447bdb42f68e
        # Lähetetään virheviesti, mikäli tämä tai tests-jobi ei palauta success
        # TODO: Tämä virheviesti lähtee myös jos koko deployment workflow tai testit canceloidaan.
        #       Pitäisikö erillisessä stepissä tarkastaa needs.test.result == 'cancelled' ja kertoa, että deployment peruttiin?
        if: ${{ job.status != 'success' || needs.tests.result != 'success' }}
        with:
          # Slack Block Kit -tyyppinen rikastettu viesti
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":warning: Develop-branchin testeissä tapahtui virhe! Deploymenttia ei tehdä.\n${{ env.JOB_RUN_URL }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          JOB_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  build-harja:
    runs-on: ubuntu-latest
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read
      # Packages read lupaa tarvitaan Harjan testaukseen tarkoitettujen Docker imageiden pullaamiseen
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Testitietokantaa tarvitaan buildin yhteydessä
      - name: Start test database
        uses: ./.github/actions/start-test-db
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          # Katso saatavilla olevat harjadb servicet docker-compose.yml:stä (esim. harjadb-latest)
          # Käytetään uusinta saatavilla olevaa testidb:tä AWS buildeissa.
          service-name: harjadb-latest

      # Huom: Build-action tarvitsee testitietokannan taustalle ennen buildin ajoa
      - name: Build Harja Uberjar
        uses: ./.github/actions/build-harja-app
        with:
          build-laadunseuranta: 'false'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and tag Harja app image
        id: build-harja-image
        uses: docker/build-push-action@v5
        env:
          IMAGE_TAG: ${{ github.sha }}
          DOCKERFILE_PATH: 'aws/fargate/Dockerfile'
          BUILD_PLATFORMS: linux/amd64
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          platforms: ${{ env.BUILD_PLATFORMS }}
          tags: harja_app:${{ env.IMAGE_TAG }}
          labels: |
            "commit=${{ github.sha }}"
          # https://docs.docker.com/build/attestations/slsa-provenance/
          provenance: true
          # Paketoi buildattu image tarriin, jotta sitä voi hyödyntää muissa jobeissa
          # Käytetään OCI (https://www.opencontainers.org/) formaattia imagessa
          #outputs: type=docker,dest=/tmp/harja-app-image.tar
          outputs: type=oci,dest=/tmp/harja-app-image.tar

      # Uploadaa build-artifact. Trivy-skanneri ja deploy-workflow lataa sen myöhemmässä vaiheessa.
      - name: Upload Harja docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: harja-app-image
          path: /tmp/harja-app-image.tar
          if-no-files-found: error
          retention-days: 3

      # Docs: https://github.com/slackapi/slack-github-action
#      - name: Send deploy failure message to Slack
#        id: slack
#        uses: slackapi/slack-github-action@70cd7be8e40a46e8b0eced40b0de447bdb42f68e
#        if: failure()
#        with:
#          # Slack Block Kit -tyyppinen rikastettu viesti
#          payload: |
#            {
#              "blocks": [
#                {
#                  "type": "section",
#                  "text": {
#                    "type": "mrkdwn",
#                    "text": ":alert-slow: Harjan build epäonnistui! Automaattista deploymenttia ei tehdä.\n${{ env.JOB_RUN_URL }}"
#                  }
#                }
#              ]
#            }
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
#          JOB_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}


  # -- Scan Harja image -- #

  scan-and-test-image:
    runs-on: ubuntu-latest
    needs: build-harja

    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # Contents is needed for the checkout action
      contents: read
      # Sarif-upload
      security-events: write
      # Packages write lupaa tarvitaan image cachen pushaamiseen GH Docker Registryyn
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download uberjar artifact
        uses: actions/download-artifact@v4
        with:
          name: harja-app-image
          path: /tmp/

      - name: Test if the artifact was downloaded correctly
        run: | 
          ls -lah /tmp/harja-app-image.tar
          tar -tvf /tmp/harja-app-image.tar

      - name: Load Harja docker image
        id: load-harja-image
        run: |
          docker load --input /tmp/harja-app-image.tar
          docker image ls -a    

      - name: Run Trivy vulnerability scanner
        uses: ./.github/actions/scan-docker-image
        env:
          DOCKERFILE_PATH: 'aws/fargate/Dockerfile'
          TRIVY_IGNORES_PATH: 'aws/fargate/.trivyignore'
        with:
          # Hae viittaus buildattuun imageen build-test-image stepin outputeista
          image-ref: ${{ steps.build-test-image.outputs.imageid }}
          dockerfile-path-for-sarif: ${{ env.DOCKERFILE_PATH }}
          trivyignores: ${{ env.TRIVY_IGNORES_PATH }}
          # TODO: Toistaiseksi ei failata deploymenttia, ainakaan ennen kuin vakaa baseline on saatu muodostettua
          fail-job-on-severities: false
          #fail-job-on-severities: 'CRITICAL,HIGH'
          #ignore-unfixed: true
          # TODO: Enabloi uudestaan
          upload-sarif: false


  # -- Deployment -- #

  deploy-to-ecs-manually:
    uses: ./.github/workflows/reusable_deploy-harja-image-to-ecs.yml
    if: ${{ github.event_name == 'workflow_dispatch' }}
    # TODO: Palauta normaali toiminta [ tests, scan-and-test-image ], kun päätoiminnallisuus on valmis
    #needs: [ tests, scan-and-test-image ]
    needs: [ scan-and-test-image ]
    # Huom. parametrit ja salaisudet on määritelty GitHub environmenteissa
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # OIDC tokenia tarvitaan AWS jobeissa roolin omaksumiseen
      id-token: write
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read
    with:
      environment: ${{ github.event.inputs.environment }}
    # Huom. Tietoturvasyistä johtuen, salaisuuksia ei voi hakea automaattisesti envinronmentista reusable workfloweissa
    #       Tässä määritetään mitkä yksittäiset salaisuudet reusable workflow saa lukea GitHub environmentista.
    #       Vaihtoehtoisesti, voi käyttää secrets: inherit toimintoa, jolloin reusable workflow saa kaikki salaisuudet
    #       kuin kutsuva workflowikin.
    secrets:
      aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Automaattinen matrix-deployment useaan testiympäristöön (Kun develop-branchiin on pushattu uusi muutos)
  deploy-to-ecs-matrix:
    uses: ./.github/workflows/reusable_deploy-harja-image-to-ecs.yml
    if: ${{ github.event_name == 'push' }}
    needs: [ tests, scan-and-test-image ]
    # Deployment ajetaan automaattisesti dev ympäristöön ja stg ympäristöön
    # TODO: Suunniteltava miten prod-deployment hoidetaan automaattisesti
    #       tai semi-automaattisesti hyväksyntäprosessilla (github environment protection rules)
    strategy:
      matrix:
        environment: [ dev, stg ]
    # Huom. parametrit ja salaisudet on määritelty GitHub environmenteissa
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # OIDC tokenia tarvitaan AWS jobeissa roolin omaksumiseen
      id-token: write
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read
    with:
      environment: ${{ matrix.environment }}
    # Huom. Tietoturvasyistä johtuen, salaisuuksia ei voi hakea automaattisesti envinronmentista reusable workfloweissa
    #       Tässä määritetään mitkä yksittäiset salaisuudet reusable workflow saa lukea GitHub environmentista.
    #       Vaihtoehtoisesti, voi käyttää secrets: inherit toimintoa, jolloin reusable workflow saa kaikki salaisuudet
    #       kuin kutsuva workflowikin.
    secrets:
      aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

