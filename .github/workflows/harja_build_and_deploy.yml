# Security hardening for GitHub Actions
# https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-third-party-actions

name: 'Harja: Build and deploy to ECS'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Valitse deploy-ympäristö'
        type: environment
        required: true
  # Käynnistä workflow automaattisesti, kun Harja: Test develop on suoriutunut loppuun
  workflow_run:
    workflows: [ "Harja: Test develop" ]
    branches:
      - develop
    types:
      - completed


env:
  GH_DOCKER_REGISTRY: ghcr.io


jobs:
  build-harja:
    runs-on: ubuntu-latest
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read
      # Packages read lupaa tarvitaan Harjan testaukseen tarkoitettujen Docker imageiden pullaamiseen
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Testitietokantaa tarvitaan buildin yhteydessä
      - name: Start test database
        uses: ./.github/actions/start-test-db
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          # Katso saatavilla olevat harjadb servicet docker-compose.yml:stä (esim. harjadb-latest)
          # Käytetään uusinta saatavilla olevaa testidb:tä AWS buildeissa.
          service-name: harjadb-latest

      # Huom: Build-action tarvitsee testitietokannan taustalle ennen buildin ajoa
      - name: Build Harja Uberjar
        uses: ./.github/actions/build-harja-app
        with:
          build-laadunseuranta: 'false'

      # Uploadaa build-artifact. Deploy-workflow lataa sen myöhemmässä vaiheessa.
      - name: Upload uberjar as artifact
        uses: actions/upload-artifact@v4
        with:
          name: harja-uberjar
          path: ./target/harja-0.0.1-SNAPSHOT-standalone.jar
          if-no-files-found: error
          retention-days: 1

      # Docs: https://github.com/slackapi/slack-github-action
      - name: Send deploy failure message to Slack
        id: slack
        uses: slackapi/slack-github-action@6c661ce58804a1a20f6dc5fbee7f0381b469e001
        if: failure()
        with:
          # Slack Block Kit -tyyppinen rikastettu viesti
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":alert-slow: Harjan build epäonnistui! Automaattista deploymenttia ei tehdä.\n${{ env.JOB_RUN_URL }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          JOB_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}


  # -- Scan Harja image -- #

  scan-and-test-image:
    runs-on: ubuntu-latest
    needs: build-harja

    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # OIDC token is needed for AWS actions assume the role
      id-token: write
      # Contents is needed for the checkout action
      contents: read
      # Sarif-upload
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download uberjar artifact
        uses: actions/download-artifact@v4
        with:
          name: harja-uberjar
          # Download to the same directory as the uberjar is built to
          path: ./target

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and tag Harja app test image
        id: build-test-image
        uses: docker/build-push-action@v5
        env:
          IMAGE_TAG: ${{ github.sha }}
          DOCKERFILE_PATH: 'aws/fargate/Dockerfile'
          BUILD_PLATFORMS: linux/amd64
        with:
          file: ${{ env.DOCKERFILE_PATH }}
          platforms: ${{ env.BUILD_PLATFORMS }}
          tags: ${{ env.GH_DOCKER_REGISTRY }}/finnishtransportagency/harja_buildtest:${{ env.IMAGE_TAG }}
          labels: |
            "commit=${{ github.sha }}"
            org.opencontainers.image.title=harja_buildtest
            org.opencontainers.image.source=https://github.com/finnishtransportagency/harja
          # Cacheta, jotta tulevaisuuden buildit ovat nopeampia.
          cache-from: type=registry,ref=${{ env.GH_DOCKER_REGISTRY }}/finnishtransportagency/harja_buildtest:buildcache
          cache-to: type=registry,ref=${{ env.GH_DOCKER_REGISTRY }}/finnishtransportagency/harja_buildtest:buildcache,mode=max
          # On myös mahdollista käyttää (experimental) GH Actions cachea: https://docs.docker.com/build/cache/backends/gha/
          #cache-from: type=gha
          #cache-to: type=gha,mode=max
          # Disabloi provenance attestations: https://github.com/docker/build-push-action/issues/820
          provenance: false
          # Lataa buildattu image paikallisesti 'docker images':iin tämän jobin käyttöön
          load: true

      #      - name: Build and tag Harja app test image
      #        id: build-test-image
      #        env:
      #          IMAGE_TAG: ${{ github.sha }}
      #          DOCKERFILE_PATH: 'aws/fargate/Dockerfile'
      #        run: |
      #          echo "Building an image with a tag $IMAGE_TAG"
      #          docker build -t harja-app-test:$IMAGE_TAG --file $DOCKERFILE_PATH .
      #
      #          echo "image=harja-app-test:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@d43c1f16c00cfd3978dde6c07f4bbcf9eb6993ca # v0.16.1
        with:
          # Hae viittaus buildattuun imageen build-test-image stepin outputeista
          image-ref: ${{ steps.build-test-image.outputs.imageid }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          # format: 'table'
          # exit-code: '1'
          # ignore-unfixed: true
          scanners: vuln,secret,misconfig
          vuln-type: 'os,library'
          # severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # -- Deployment -- #

  deploy-to-ecs-manually:
    uses: ./.github/workflows/reusable_deploy-harja-image-to-ecs.yml
    if: ${{ github.event_name == 'workflow_dispatch' }}
    needs: scan-and-test-image
    # Huom. parametrit ja salaisudet on määritelty GitHub environmenteissa
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # OIDC tokenia tarvitaan AWS jobeissa roolin omaksumiseen
      id-token: write
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read
    with:
      environment: ${{ github.event.inputs.environment }}
    # Huom. Tietoturvasyistä johtuen, salaisuuksia ei voi hakea automaattisesti envinronmentista reusable workfloweissa
    #       Tässä määritetään mitkä yksittäiset salaisuudet reusable workflow saa lukea GitHub environmentista.
    #       Vaihtoehtoisesti, voi käyttää secrets: inherit toimintoa, jolloin reusable workflow saa kaikki salaisuudet
    #       kuin kutsuva workflowikin.
    secrets:
      aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Automaattinen matrix-deployment useaan ympäristöön (workflow_run triggerillä)
  deploy-to-ecs-matrix:
    uses: ./.github/workflows/reusable_deploy-harja-image-to-ecs.yml
    if: ${{ github.event_name == 'workflow_run' }}
    needs: scan-and-test-image
    # Deployment ajetaan automaattisesti dev ympäristöön ja stg ympäristöön
    # TODO: Suunniteltava miten prod-deployment hoidetaan automaattisesti
    #       tai semi-automaattisesti hyväksyntäprosessilla (github environment protection rules)
    strategy:
      matrix:
        environment: [ dev, stg ]
    # Huom. parametrit ja salaisudet on määritelty GitHub environmenteissa
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # OIDC tokenia tarvitaan AWS jobeissa roolin omaksumiseen
      id-token: write
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read
    with:
      environment: ${{ matrix.environment }}
    # Huom. Tietoturvasyistä johtuen, salaisuuksia ei voi hakea automaattisesti envinronmentista reusable workfloweissa
    #       Tässä määritetään mitkä yksittäiset salaisuudet reusable workflow saa lukea GitHub environmentista.
    #       Vaihtoehtoisesti, voi käyttää secrets: inherit toimintoa, jolloin reusable workflow saa kaikki salaisuudet
    #       kuin kutsuva workflowikin.
    secrets:
      aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

