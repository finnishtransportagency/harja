# Security hardening for GitHub Actions
# https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-third-party-actions

name: '[Reusable] Deploy Harja image to ECS'

on:
  workflow_call:
    inputs:
      environment:
        description: 'Deploymentin kohdeympäristö'
        type: string
        required: true
      commit-sha:
        description: 'Deploymentin commit SHA. Tämän perusteella haetaan migraatiot ja tagataan deployattava image.
                      Inputille pitää antaa arvo ulkopuolelta selkeyden vuoksi, default arvoa ei käytetä.'
        type: string
        required: true
      artifact-run-id:
        description: 'Tietyn workflowin run ID, josta build artifact haetaan ja joka deployataan kohdeympäristöön.
                      Inputille pitää antaa arvo ulkopuolelta selkeyden vuoksi, default arvoa ei käytetä.'
        type: string
        required: true
    secrets:
      AWS_ACCOUNT_ID:
        required: true
      SLACK_WEBHOOK_URL:
        required: true

run-name: Deploy to '${{ inputs.environment }}' AWS env by @${{ github.actor }}


# Note: Each job runs in a fresh VM, so the environment is not shared between jobs.
jobs:
  deploy-image-to-ecs:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # OIDC token is needed for AWS actions assume the role
      id-token: write
      # Contents is needed for the checkout action
      contents: read
      # Actions read lupaa tarvitaan actions/download-artifact actionissa
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List used environment variables
        run: |
          echo "Target environment: ${{ inputs.environment }}"
          echo "Commit SHA: ${{ inputs.commit-sha }}"
          echo "Artifact run ID: ${{ inputs.artifact-run-id }}"
          echo " --- "
          echo "Environment variables:"
          echo "  ECR_REPOSITORY_NAME: ${{ vars.ECR_REPOSITORY_NAME }}"
          echo "  ECS_TASK_DEFINITION_NAME: ${{ vars.ECS_TASK_DEFINITION_NAME }}"
          echo "  ECS_CONTAINER_NAME: ${{ vars.ECS_CONTAINER_NAME }}"
          echo "  ECS_CLUSTER_NAME: ${{ vars.ECS_CLUSTER_NAME }}"
          echo "  ECS_SERVICE_NAME: ${{ vars.ECS_SERVICE_NAME }}"

        shell: bash

      # Failaa jobi, jos Commit SHA tai Artifact run ID ovat tyhjiä
      - name: Check inputs
        env:
          COMMIT_SHA: ${{ inputs.commit-sha }}
          ARTIFACT_RUN_ID: ${{ inputs.artifact-run-id }}
        run: |
          if [ -z "$COMMIT_SHA" ]; then
            echo "Error: inputs.commit-sha is empty. Exiting..."
            exit 1
          fi

          if [ -z "$ARTIFACT_RUN_ID" ]; then
            echo "Error: inputs.artifact-run-id is empty. Exiting..."
            exit 1
          fi

      # https://github.com/actions/download-artifact?tab=readme-ov-file#inputs
      - name: Download uberjar artifact
        uses: actions/download-artifact@v4
        with:
          name: harja-uberjar
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Download to the same directory as the uberjar is built to
          path: ./target
          # Lataa build artifact tietystä workflow runista sen ID:n perusteella
          # Artifactin suhteen täytyy olla tarkkana, jotta annetut run-id ja commit-sha ovat peräisin samasta workflow runista.
          run-id: ${{ inputs.artifact-run-id }}

      - name: Assume role with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: 'eu-west-1'
          role-to-assume: 'arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/cicd-github-harja-infra-admin'
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      # https://github.com/aws-actions/amazon-ecr-login
      # mask-password: 'true' käyttö on suositeltavaa, jotta docker-salasanaa ei tulosteta mikäli debug-lokitus on enabloitu.
      # Huomioi kuitenkin, että docker salasanan jakaminen jobien välillä ei onnistu mikäli se maskataan.
      - name: Authenticate with AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Build, tag and push image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_NAME }}
          # Image tag muodostetaan annetun commit SHA:n perusteella
          IMAGE_TAG: ${{ inputs.commit-sha }}
          DOCKERFILE_PATH: 'aws/fargate/Dockerfile'
        run: |
          echo "Building image with tag $IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --file $DOCKERFILE_PATH .
          
          echo "Pushing 'latest' and '${IMAGE_TAG}' tags to ECR"
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Sammutetaan Harjan Fargate taskit migraatioiden ajoa varten, jotta ne eivät häiritse migraation onnistumista
      - name: Shutdown Harja Fargate tasks
        uses: ./.github/actions/shutdown-fargate-tasks
        timeout-minutes: 15
        #if: ${{ contains(fromJson('["dev", "stg"]'), inputs.environment)  }}
        if: ${{ contains(fromJson('["dev", "stg", "prod"]'), inputs.environment)  }}
        with:
          cluster: ${{ vars.ECS_CLUSTER_NAME }}
          service: ${{ vars.ECS_SERVICE_NAME }}

      - name: Run migrations to RDS
        uses: ./.github/actions/run-migrations-to-rds
        #if: ${{ contains(fromJson('["dev", "stg"]'), inputs.environment)  }}
        if: ${{ contains(fromJson('["dev", "stg", "prod"]'), inputs.environment)  }}
        with:
          # Migraatiot halutaan ajaa samalle commit SHA:lle, kuin mistä build artifact on peräisin,
          # jotta migraatiot ja deployattava image ovat yhteensopivia.
          # Käytetään tässä annettua commit SHA:ta, jolla ECR image myös tagataan.
          commit-sha: ${{ inputs.commit-sha }}

      # Migraatioiden ajon jälkeen hoidetaan imagen ECS task deployment loppuun alla.
      # Uusi image on jo julkaistu ECR:ään odottamaan aiemmassa vaiheessa.
      - name: Download task definition
        env:
          ECS_TASK_DEFINITION_NAME: ${{ vars.ECS_TASK_DEFINITION_NAME }}
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_NAME --query taskDefinition> harja-task-definition.json

      - name: Update ECS task definition (add image id)
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: harja-task-definition.json
          container-name: ${{ vars.ECS_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ vars.ECS_SERVICE_NAME }}
          cluster: ${{ vars.ECS_CLUSTER_NAME }}
          wait-for-service-stability: false

      # Pakotetaan lopuksi Harjan Fargate taskit käynnistymään, mikäli ne on aiemmin laitettu alas.
      - name: Start Harja Fargate tasks
        uses: ./.github/actions/start-fargate-tasks
        timeout-minutes: 10
        # Pakota uudelleenkäynnistyminen vaikka migraatio tai ECS deploy edellä olisi epäonnistunut
        # Fargate taskit sammutetaan ennen migraatioiden ajoa, mutta ne täytyy aina käynnistää uudelleen,
        # jotta palvelu pysyy toiminnassa.
        if: always()
        with:
          cluster: ${{ vars.ECS_CLUSTER_NAME }}
          service: ${{ vars.ECS_SERVICE_NAME }}

      # Docs: https://github.com/slackapi/slack-github-action
      - name: Send deploy failure message to Slack
        id: slack
        uses: slackapi/slack-github-action@70cd7be8e40a46e8b0eced40b0de447bdb42f68e
        if: failure()
        with:
          # Slack Block Kit -tyyppinen rikastettu viesti
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":alert-slow: ECS deploy -> ${{ inputs.environment }} epäonnistui!\n${{ env.JOB_RUN_URL }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          JOB_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

