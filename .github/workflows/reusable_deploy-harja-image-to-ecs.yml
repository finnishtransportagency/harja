# Security hardening for GitHub Actions
# https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-third-party-actions

name: 'Deploy Harja image to ECS'

on:
  workflow_call:
    inputs:
      environment:
        description: 'Deploymentin kohdeympäristö'
        type: string
        required: true
    secrets:
      AWS_ACCOUNT_ID:
        required: true


# Note: Each job runs in a fresh VM, so the environment is not shared between jobs.
jobs:
  deploy-image-to-ecs:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # OIDC token is needed for AWS actions assume the role
      id-token: write
      # Contents is needed for the checkout action
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List used environment variables
        run: |
          echo "Target environment: ${{ inputs.environment }}"
          echo "Environment variables:"
          echo "  ECR_REPOSITORY_NAME: ${{ vars.ECR_REPOSITORY_NAME }}"
          echo "  ECS_TASK_DEFINITION_NAME: ${{ vars.ECS_TASK_DEFINITION_NAME }}"
          echo "  ECS_CONTAINER_NAME: ${{ vars.ECS_CONTAINER_NAME }}"
          echo "  ECS_CLUSTER_NAME: ${{ vars.ECS_CLUSTER_NAME }}"
          echo "  ECS_SERVICE_NAME: ${{ vars.ECS_SERVICE_NAME }}"

        shell: bash

      - name: Download uberjar artifact
        uses: actions/download-artifact@v3
        with:
          name: harja-uberjar
          # Download to the same directory as the uberjar is built to
          path: ./target

      - name: Assume role with OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: 'eu-west-1'
          role-to-assume: 'arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/cicd-github-harja-infra-admin'
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Authenticate with AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag and push image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          DOCKERFILE_PATH: 'aws/fargate/Dockerfile'
        run: |
          echo "Building image with tag $IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --file $DOCKERFILE_PATH .
          
          echo "Pushing image to ECR"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # TODO: Tähän kohtaan todennäköisesti migraatioiden ajo RDS:ään
      # Laitetaan esim. Fargate kontit alas ja ajetaan migratiot
      # Tässä kohtaa uusi image on jo puskettu ECR:ään.
      # Kun migraatiot ovat valmiit, voidaan viedä imagen deploymentti alempana loppuun ja käynnistää kontit uudelleen
      #      - name: Run migrations to RDS
      #        uses: ./.github/actions/run-migrations-to-rds
      #        with:
      #

      # TODO: Määrittele github environmentit (dev, stg, prod) ja käytä env muuuttujia niiden kautta
      - name: Download task definition
        env:
          ECS_TASK_DEFINITION_NAME: ${{ vars.ECS_TASK_DEFINITION_NAME }}
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_NAME --query taskDefinition> harja-task-definition.json

      - name: Update ECS task definition (add image id)
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: harja-task-definition.json
          container-name: ${{ vars.ECS_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ vars.ECS_SERVICE_NAME }}
          cluster: ${{ vars.ECS_CLUSTER_NAME }}
          wait-for-service-stability: false
          #wait-for-service-stability: true

