# Security hardening for GitHub Actions
# https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-third-party-actions

name: 'Harja: Test and build (PR)'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

on:
  # Manuaalisen käynnistyksen asetukset
  workflow_dispatch:
  # Jobi ajetaan automaattisesti jokaiselle PR:lle, jonka base branch on develop
#  pull_request:
#    branches: [ develop ]

# Tässä voi määritellä yhteiset permissionit kaikille jobeille workflowissa tarvittaessa
# README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
permissions:
  # Contents read lupaa tarvitaan checkout actionissa
  contents: read
  # Packages read lupaa tarvitaan Harjan testaukseen tarkoitettujen Docker imageiden pullaamiseen
  packages: read

env:
  GH_DOCKER_REGISTRY: ghcr.io

jobs:
  # Build job
  build:
    name: "Prod build"
    runs-on: ubuntu-latest
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read
      # Packages read lupaa tarvitaan Harjan testaukseen tarkoitettujen Docker imageiden pullaamiseen
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Käynnistetään testitietokanta docker-kontti, jota tarvitaan testien ajamiseen ja Harjan buildaamiseen
      - name: Start test database
        uses: ./.github/actions/start-test-db
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup clojure environment
        uses: ./.github/actions/setup-clojure-env

      #- name: Run unit tests
      #  run: lein test2junit

      # Buildataan Harjan osat erillisinä palasina
      - name: Build back-end
        run: |
          echo "Building backend"
          lein do compile
      - name: Build front-end
        run: |
          echo "Building frontend"
          lein do less once, with-profile prod-cljs compile-prod

      # TODO: Disabloitu toistaiseksi buildin testailun nopeuttamiseksi.
      #- name: Build laadunseuranta
      #  run: |
      #    echo "Building laadunseuranta"
      #    lein do with-profile laadunseuranta-prod compile-laadunseuranta-prod
      #- name: Build documentation
      #  run: |
      #    echo "Building documentation"
      #    lein codox

      # Buildataan lopuksi uberjar
      - name: Build uberjar
        run: |
          echo "Building uberjar"
          lein uberjar

      - name: Upload uberjar as artifact
        uses: actions/upload-artifact@v3
        with:
          name: harja-uberjar
          path: ./target/harja-0.0.1-SNAPSHOT-standalone.jar
          if-no-files-found: error
          retention-days: 1

  # Ajaa esim. perustestit (back-testit, front-testit, integraatiotestit
  # -- OHJEITA KEHITYKSEEN --
  # TODO: Jos testien ajoa haluaa pilkkoa erillisiksi Status Checkeiksi, niin ne pitää pilkkoa erillisiksi jobeiksi.
  #       Halutut status checkit valikoidaan Harjan Github-repon asetuksista.
  #       Jokainen jobi ajetaan omassa VM:ssä, joten perusasiat ja tarvittaessa testitietokannan käynnistys action
  #       pitää ottaa mukaan jobiin.
  #
  # Tässä ei tarvitse käyttää mitään CircleCI:ssä käytettyjä docker imageita. Tavoitellaan yksinkertaisuutta ja suoraviivaisuutta.
  #
  # Tarvittavat depsut, esim. phantom voi asentaa suoraan tässä jobissa.
  # Halutessaan testien depsujen asentelusta voi tehdä erillisen composite-actionin ja tallentaa sen .github/actions kansioon
  # Katso esimerkiksi mitä "Setup Clojure environment" action tekee: Se asentaa java-11 ja clojure-työkalut.
  #
  basic-tests:
    name: "Perustestit"
    runs-on: ubuntu-latest
    env:
      TZ: "EET"
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read
      # Packages read lupaa tarvitaan Harjan testaukseen tarkoitettujen Docker imageiden pullaamiseen
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Käynnistetään testitietokanta docker-kontti, jota tarvitaan testien ajamiseen
      - name: Start test database
        uses: ./.github/actions/start-test-db
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup clojure environment
        uses: ./.github/actions/setup-clojure-env

      - name: Run backend tests
        run: lein test

      - name: run slow tests
        run: lein test :hidas

      # integraatiotestit vaativat ActiveMQ-brokerin ympäristöön, tulossa eri haarassa
      # - name: Run integration tests
      #   run: lein test :integraatio


      #
  e2e-tests:
    name: "e2e-testit"
    runs-on: ubuntu-latest
    needs: build
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read
      # Packages read lupaa tarvitaan Harjan testaukseen tarkoitettujen Docker imageiden pullaamiseen
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Käynnistetään testitietokanta docker-kontti, jota tarvitaan testien ajamiseen
      - name: Start test database
        uses: ./.github/actions/start-test-db
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Asenna pelkkä java
      - name: Prepare java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Download uberjar artifact
        uses: actions/download-artifact@v3
        with:
          name: harja-uberjar
          # Downloads to the same directory as the uberjar is built to
          path: ./target

      # Pohja cypress-kontin käynnistämiselle
      # TODO: Toteuta. Ktso composite-actionin pohja
#      - name: Start cypress
#        uses: ./.github/actions/start-cypress
#        with:
#          registry: ${{ env.GH_DOCKER_REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}

      # TODO: Käynnistä aiemmin artifactina ladattu Harja-jar

      # TODO: Aja cypress testit käynnistettyä cypress-konttia varten.
      #      Harja jar käyttää tietokantanaan jobin alussa käynnistetty testdb:tä

