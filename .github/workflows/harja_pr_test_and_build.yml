# Security hardening for GitHub Actions
# https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-third-party-actions

name: 'Harja: Test and build (PR)'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

on:
  # Manuaalisen käynnistyksen asetukset
  workflow_dispatch:
  # Jobi ajetaan automaattisesti jokaiselle PR:lle, jonka base branch on develop
  pull_request:
    branches: [ develop ]

# Tässä voi määritellä yhteiset permissionit kaikille jobeille workflowissa tarvittaessa
# README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
permissions:
  # Contents read lupaa tarvitaan checkout actionissa
  contents: read
  # Packages read lupaa tarvitaan Harjan testaukseen tarkoitettujen Docker imageiden pullaamiseen
  packages: read

env:
  GH_DOCKER_REGISTRY: ghcr.io

jobs:
  # Linter job
  lint-clj:
    name: "Lint Clojure"
    runs-on: ubuntu-latest
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup clojure environment
        uses: ./.github/actions/setup-clojure-env
        with:
          install-tools: true

      # https://github.com/clj-kondo/clj-kondo/blob/master/doc/ci-integration.md
      - name: Lint
        run: clj-kondo --lint src --config '{:output {:pattern "::{{level}} file={{filename}},line={{row}},col={{col}}::{{message}}"}}'

  # Build job
  build:
    name: "Prod build"
    runs-on: ubuntu-latest
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read
      # Packages read lupaa tarvitaan Harjan testaukseen tarkoitettujen Docker imageiden pullaamiseen
      packages: read
      # Actions write oikeudella voidaan esim. listata ja poistaa artifacteja
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Käynnistetään testitietokanta docker-kontti, jota tarvitaan testien ajamiseen ja Harjan buildaamiseen
      - name: Start test database
        uses: ./.github/actions/start-test-db
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup clojure environment
        uses: ./.github/actions/setup-clojure-env

      #- name: Run unit tests
      #  run: lein test2junit

      # Buildataan Harjan osat erillisinä palasina
      - name: Build back-end
        run: |
          echo "Building backend"
          lein do compile
      - name: Build front-end
        run: |
          echo "Building frontend"
          lein do less once, with-profile prod-cljs compile-prod

      # TODO: Disabloitu toistaiseksi buildin testailun nopeuttamiseksi.
      #- name: Build laadunseuranta
      #  run: |
      #    echo "Building laadunseuranta"
      #    lein do with-profile laadunseuranta-prod compile-laadunseuranta-prod
      #- name: Build documentation
      #  run: |
      #    echo "Building documentation"
      #    lein codox

      # Buildataan lopuksi uberjar
      - name: Build uberjar
        run: |
          echo "Building uberjar"
          lein uberjar

      - name: Name build artifact using the branch name
        id: artifact-name
        env:
          REF: ${{ github.ref }}
          # Branchin nimen "/"-merkit muunnetaan "-"-merkeiksi, ja muodostetaan branchiin pohjautuva nimi
        run: echo "value=${REF////-}-uberjar" >> $GITHUB_OUTPUT

      - name: Delete old branch build artifacts (only the latest is needed)
        uses: actions/github-script@v6
        id: artifact
        with:
          script: |
            const res = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })

            res.data.artifacts
              .filter(({ name }) => name === '${{ steps.artifact-name.outputs.value }}')
              .forEach(({ id }) => {
                github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: id,
                })
              })

      - name: Upload a new build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact-name.outputs.value }}
          path: ./target/harja-0.0.1-SNAPSHOT-standalone.jar
          if-no-files-found: error
          retention-days: 1

  # Ajaa esim. perustestit (back-testit, front-testit, integraatiotestit
  # -- OHJEITA KEHITYKSEEN --
  # TODO: Jos testien ajoa haluaa pilkkoa erillisiksi Status Checkeiksi, niin ne pitää pilkkoa erillisiksi jobeiksi.
  #       Halutut status checkit valikoidaan Harjan Github-repon asetuksista.
  #       Jokainen jobi ajetaan omassa VM:ssä, joten perusasiat ja tarvittaessa testitietokannan käynnistys action
  #       pitää ottaa mukaan jobiin.
  #
  # Tässä ei tarvitse käyttää mitään CircleCI:ssä käytettyjä docker imageita. Tavoitellaan yksinkertaisuutta ja suoraviivaisuutta.
  #
  # Tarvittavat depsut, esim. phantom voi asentaa suoraan tässä jobissa.
  # Halutessaan testien depsujen asentelusta voi tehdä erillisen composite-actionin ja tallentaa sen .github/actions kansioon
  # Katso esimerkiksi mitä "Setup Clojure environment" action tekee: Se asentaa java-11 ja clojure-työkalut.
  #
  basic-tests:
    name: "Perustestit"
    runs-on: ubuntu-latest
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read
      # Packages read lupaa tarvitaan Harjan testaukseen tarkoitettujen Docker imageiden pullaamiseen
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Käynnistetään testitietokanta docker-kontti, jota tarvitaan testien ajamiseen
      - name: Start test database
        uses: ./.github/actions/start-test-db
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup clojure environment
        uses: ./.github/actions/setup-clojure-env

      # TODO: Aja halutut testit
      #- name: Run unit tests jne.
      #  run: lein test2junit

      #

  e2e-tests:
    name: "e2e-testit (Cypress)"
    needs: build
    runs-on: ubuntu-latest
    env:
      # Asetetaan Suomen aikavyöhyke testejä varten
      TZ: "EET"

    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # Contents read lupaa tarvitaan checkout actionissa
      contents: read
      # Packages read lupaa tarvitaan Harjan testaukseen tarkoitettujen Docker imageiden pullaamiseen
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Käynnistetään testitietokanta docker-kontti, jota tarvitaan testien ajamiseen
      - name: Start test database
        uses: ./.github/actions/start-test-db
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Asenna pelkkä java
      - name: Prepare java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Get the build artifact name
        id: artifact-name
        env:
          REF: ${{ github.ref }}
          # Branchin nimen "/"-merkit muunnetaan "-"-merkeiksi, ja muodostetaan branchiin pohjautuva nimi
        run: echo "value=${REF////-}-uberjar" >> $GITHUB_OUTPUT

      - name: Download uberjar artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ steps.artifact-name.outputs.value }}
          path: ./

      - name: Start Harja jar
        env:
          HARJA_TIETOKANTA_HOST: localhost
          HARJA_TIETOKANTA_PORTTI: 5432
          HARJA_SALLI_OLETUSKAYTTAJA: "true"
          HARJA_DEV_YMPARISTO: "false"
        run: |
          echo "Salli harjan oletuskäyttäjä? ${HARJA_SALLI_OLETUSKAYTTAJA}"
          echo "Harja dev ympäristö? ${HARJA_DEV_YMPARISTO}"
          echo "Aikavyöhyke: ${TZ}"
          echo "HARJA_TIETOKANTA_HOST: ${HARJA_TIETOKANTA_HOST}"
          echo "HARJA_TIETOKANTA_PORTTI: ${HARJA_TIETOKANTA_PORTTI}"

          echo "Luodaan Harjalle 'salaisuudet' .harja-kansioon"
          mkdir -p ../.harja
          echo aaaa > ../.harja/anti-csrf-token
          touch ../.harja/{mml,google-static-maps-key,turi-salasana,ava-salasana,yha-salasana,yha-api-key,labyrintti-salasana,velho-salasana,velho-varuste-salasana,api-sahkoposti-salasana,digiroad-api-key}
          touch ../.harja/harjalle_ajorata_kaista_puoli_20210825.csv
          
          echo "Käynnistetään Harja..."
          java -cp :harja-0.0.1-SNAPSHOT-standalone.jar harja.palvelin.main > harja.out 2>&1 &
          javapid=$!
          
          for i in $(seq 4); do
            curl localhost:3000 > /dev/null 2>&1 && break
            if kill -0 $javapid; then
              echo "Harja ei ole vielä käynnissä, odotetaan 10 sec..."
              sleep 10
            else
              echo "Harja ei käynnisty. Lopetetaan..."
              cat harja.out
              exit 1
            fi
          done

          echo "Harja käynnistyi. Alla ote Harja-sovelluksen lokista:"
          echo +++++++++++++++++++
          tail -50 harja.out
          echo +++++++++++++++++++
          echo

      - uses: actions/cache@v3
        id: cache-npm
        with:
          path: node_modules
          key: ${{ runner.os }}-cypress-pr-${{ hashFiles('package-lock.json') }}

      # Asennetaan projektin package.jsonissa määritelty transit-js versio
      # Package-lock tiedostosta ei voi asennaa yksittäisiä paketteja "npm ci" komennolla, joten
      # asennetaan kompromissina npm installilla spesifi versio, mikäli package-lock.json muuttuu.
      - name: Install Cypress test dependencies (transit-js)
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: |
          NPM_TRANSITJS_VERSION=$(node -pe 'require("./package").dependencies["transit-js"]')
          npm install "transit-js@${NPM_TRANSITJS_VERSION}"

      # Ajaa cypress testit erillisessä kontissa
      # Konttiin mountataan GITHUB_WORKSPACE, joka sisältää myös aiemmin asennetut node-moduulit, joita testit tarvitsevat
      - name: Run cypress
        uses: ./.github/actions/start-cypress
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_WORKSPACE: ${{ env.GITHUB_WORKSPACE }}
