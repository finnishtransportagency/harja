# Security hardening for GitHub Actions
# https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-third-party-actions

name: '[DEV] Harja: Build and deploy to ECR'

concurrency:
  group: ${{ github.ref_name }}-${{ github.workflow }}
  cancel-in-progress: true

on:
  workflow_dispatch:

# No common permissions currently needed for all jobs, but if needed, they can be defined here:
# README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
#permissions:


env:
  GH_DOCKER_REGISTRY: ghcr.io


# Note: Each job runs in a fresh VM, so the environment is not shared between jobs.
jobs:
  test-and-build:
    runs-on: ubuntu-latest
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # Contents is needed for the checkout action
      contents: read
      # Packages read-access is needed for pulling the harja test database image
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          registry: ${{ env.GH_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and start test database
        run: |
          cd .github
          echo "Pulling harja test database image (Docker Compose version: $(docker-compose version --short))"
          docker compose pull harjadb
          
          echo "Starting harja test database and waiting for it to start (Docker Compose version: $(docker-compose version --short))"
          docker compose up -d --wait --wait-timeout 60 harjadb

      - name: Run migrations and test data into harja-postgres service
        run: |
          docker ps -a

          echo "Running migrations and test data into harja-postgres service"
          docker exec --user postgres harjadb /bin/bash -c "~/aja-migraatiot.sh"
          docker exec --user postgres harjadb /bin/bash -c "~/aja-testidata.sh"

      ## Build Harja uberjar ##
      - name: Prepare java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache Clojure Dependencies
        id: cache-clojure-deps
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-leiningen-${{ hashFiles('**/project.clj') }}
          restore-keys: ${{ runner.os }}-leiningen-

      # TODO: Selvitä tietoturvanäkökulma setup-clojure actionionille
      #      - name: Install clojure tools
      #        uses: DeLaGuardo/setup-clojure@9.5
      #        with:
      #          clj-kondo: 2023.05.26
      #          lein: 2.9.10

      - name: Download Clojure dependencies
        if: steps.cache-clojure-deps.outputs.cache-hit != 'true'
        run: lein deps

      #- name: Run unit tests
      #  run: lein test2junit

      - run: |
          echo "Building backend"
          lein do compile
      - run: |
          echo "Building frontend"
          lein do less once, with-profile prod-cljs compile-prod
      # TODO: Disabloitu toistaiseksi buildin testailun nopeuttamiseksi. Tämäkin menee kyllä läpi OK.
      #      - run: |
      #          echo "Building laadunseuranta"
      #          lein do with-profile laadunseuranta-prod compile-laadunseuranta-prod
      - run: |
          echo "Building documentation"
          lein codox
      - run: |
          echo "Building uberjar"
          lein uberjar

      - name: Upload uberjar as artifact
        uses: actions/upload-artifact@v3
        with:
          name: harja-uberjar
          path: ./target/harja-0.0.1-SNAPSHOT-standalone.jar
          if-no-files-found: error
          retention-days: 1

  deploy-to-ecs:
    runs-on: ubuntu-latest
    needs: test-and-build
    # README: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
    permissions:
      # OIDC token is needed for AWS actions assume the role
      id-token: write
      # Contents is needed for the checkout action
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download uberjar artifact
        uses: actions/download-artifact@v3
        with:
          name: harja-uberjar
          # Download to the same directory as the uberjar is built to
          path: ./target

      - name: Assume role with OIDC
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: 'eu-west-1'
          role-to-assume: 'arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID_DEV }}:role/cicd-github-harja-infra-admin'
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Authenticate with AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag and push image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: harja-ecr-repository
          IMAGE_TAG: ${{ github.sha }}
          DOCKERFILE_PATH: 'aws/fargate/Dockerfile'
        run: |
          echo "Building image with tag $IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --file $DOCKERFILE_PATH .
          
          echo "Pushing image to ECR"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # TODO: Määrittele github environmentit (dev, stg, prod) ja käytä env muuuttujia niiden kautta
      - name: Download task definition
        env:
          ECS_TASK_DEFINITION_NAME_DEV: ${{ vars.ECS_TASK_DEFINITION_NAME_DEV }}
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_NAME_DEV --query taskDefinition> harja-task-definition.json

      - name: Update ECS task definition (add image id)
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: harja-task-definition.json
          container-name: ${{ vars.ECS_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ vars.ECS_SERVICE_NAME_DEV }}
          cluster: ${{ vars.ECS_CLUSTER_NAME_DEV }}
          wait-for-service-stability: false
          #wait-for-service-stability: true

