# Security hardening for GitHub Actions
# https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-third-party-actions

name: 'Scan Docker image'
description: 'Scan a Docker image for vulnerabilities using Trivy. You must build the image before using this action.'

inputs:
  image-ref:
    description: 'Reference to a previously built Docker image to scan'
    required: true
  dockerfile-path-for-sarif:
    description: 'Path to the dockerfile, to be used in the Sarif report as an identifier'
    required: true
  trivyignores:
    description: 'A comma-separated list of relative paths in repository to one or more .trivyignore files'
  fail-job-on-severities:
    description: 'Fail scanning job when encountering a vuln of any specified severity, such as: "CRITICAL,HIGH,MEDIUM". Set "false" to prevent failure.'
    default: 'CRITICAL,HIGH'
  vuln-types:
    description: 'Comma-separated list of vuln types to scan, such as: "os,library"'
    default: 'os,library'
  ignore-unfixed:
    description: 'Ignore unfixed vulnerabilities'
    default: 'false'
  upload-sarif:
    description: 'Upload Sarif report to GitHub'
    default: 'false'


runs:
  using: "composite"
  steps:
    # Note: Currently, the trivy action must be run multiple times to achieve different goals
    # Run a full scan and show results
    - name: Run Trivy vulnerability scanner (Full scan, all vuln-types, all severities, no job failure)
      uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b2c9bd0d8 # v0.24.0
      env:
        IMAGE_REF: ${{ inputs.image-ref }}
        # FIXME: Tämä on väliaikainen workaround, kunnes trivyn rate limit ongelma on korjattu
        TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2
      with:
        image-ref: ${{ env.IMAGE_REF}}
        output: trivy.txt
        hide-progress: true
        exit-code: '0'
        scanners: vuln,secret,misconfig
        vuln-type: 'os,library'
        severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        trivyignores: ${{ inputs.trivyignores }}

    - name: Publish Trivy Output to Summary
      run: |
        if [[ -s trivy.txt ]]; then
          {
            echo "### Security Scan Results"
            echo "<details><summary>Click to expand</summary>"
            echo ""
            echo '```terraform'
            cat trivy.txt
            echo '```'
            echo "</details>"
          } >> $GITHUB_STEP_SUMMARY
        fi
      shell: bash

    - name: Run Trivy and generate a Sarif report
      uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b2c9bd0d8 # v0.24.0
      if: ${{ inputs.upload-sarif == 'true' }}
      env:
        IMAGE_REF: ${{ inputs.image-ref }}
        # FIXME: Tämä on väliaikainen workaround, kunnes trivyn rate limit ongelma on korjattu
        TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2
      with:
        image-ref: ${{ env.IMAGE_REF}}
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'
        scanners: vuln
        vuln-type: 'os,library'
        severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        trivyignores: ${{ inputs.trivyignores }}

    # Update the SARIF report artifact locations with the user provided Dockerfile path
    # This is a workaround for the issue where the Dockerfile path is not included in the SARIF report, to allow for better vulnerability tracking
    # The issue is tracked here: https://github.com/aquasecurity/trivy/issues/708
    - name: Update SARIF report vuln locations
      if: ${{ inputs.upload-sarif == 'true' }}
      env:
        DOCKERFILE_PATH: ${{ inputs.dockerfile-path-for-sarif }}
      run: |
        cat trivy-results.sarif | \
          jq '.runs[].results[].locations[].physicalLocation.artifactLocation += {"uri": "${{ env.DOCKERFILE_PATH }}","uriBaseId": "ROOTPATH"}' | \
          jq '.runs[].results[].locations[].physicalLocation.region += {"startLine": 1,"startColumn": 1,"endLine": 1,"endColumn": 1}' \
        > sarif.tmp
        mv trivy-results.sarif trivy-results.sarif.orig
        mv sarif.tmp trivy-results.sarif
      shell: bash

# Enable this, if you want to upload the Sarif report as an artifact for debugging
#    - name: Upload the sarif report as an artifact for debugging
#      uses: actions/upload-artifact@v4
#      if: ${{ inputs.upload-sarif == 'true' }}
#      with:
#        name: 'trivy-results.sarif'
#        path: 'trivy-results.sarif'
#        if-no-files-found: error
#        retention-days: 1

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: ${{ inputs.upload-sarif == 'true' }}
      with:
        sarif_file: 'trivy-results.sarif'

    # To fail the job on specific severity, we have to run the scanner again
    - name: Run Trivy vulnerability scanner (Limited scan, fail job if vulns found)
      uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b2c9bd0d8 # v0.24.0
      if: ${{ inputs.fail-job-on-severities != 'false' }}
      env:
        SEVERITIES: ${{ inputs.fail-job-on-severities }}
        VULN_TYPES: ${{ inputs.vuln-types }}
        IGNORE_UNFIXED: ${{ inputs.ignore-unfixed }}
        IMAGE_REF: ${{ inputs.image-ref }}
        # FIXME: Tämä on väliaikainen workaround, kunnes trivyn rate limit ongelma on korjattu
        TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2
      with:
        image-ref: ${{ env.IMAGE_REF}}
        format: 'table'
        exit-code: '1'
        scanners: vuln,secret,misconfig
        ignore-unfixed: ${{ env.IGNORE_UNFIXED }}
        vuln-type: ${{ env.VULN_TYPES }}
        severity: ${{ env.SEVERITIES }}
        trivyignores: ${{ inputs.trivyignores }}
